<ROSETTASCRIPTS>

  <SCOREFXNS>

    #A weight is added to small-range hbonds to favor helix
    <ScoreFunction name="fullatom" weights="talaris2014">
      <Reweight scoretype="hbond_sr_bb"    weight="1.6"/>
    </ScoreFunction>

  </SCOREFXNS>

  <RESIDUE_SELECTORS>
    # Standard FFL ResidueSelectors.
    <xi:include href="../../../xml_pieces/selectors.xml" />

    # Template: 3lhp.pdb.gz: Engineered protein.
    <Index name="insertion"      resnums="49S-70S" />
    <Chain name="templateChain"  chains="S" />
    <Not   name="!templateChain" selector="templateChain" />

    # Motif: pdbs/2wh6.pdb.gz: BCL-2-LIKE PROTEIN 11: BH3
    <Index name="query_motif" resnums="51B-72B" />
    <Chain name="designChain" chains="B" />
    <Chain name="binder"      chains="A" />

    # Target change core residues of the Motif to look like those
    # of 4oyd
    <Index name="m1t" resnums="45B" /> # L
    <Index name="m2t" resnums="46B" /> # E
    <Index name="m3t" resnums="48B" /> # R
    <Index name="m4t" resnums="49B" /> # Y
    <Index name="m5t" resnums="52B,56B,63B" /> # A
    <Index name="m6t" resnums="53B" /> # M
    <Index name="m7t" resnums="59B" /> # D
    <Index name="m8t" resnums="60B,64B" /> # I

    # For alignments
    # Target: pdbs/4oyd.pdb.gz: COMPUTATIONALLY DESIGNED INHIBITOR
    # We need this to compare the RMSD of our design with it, as we are
    # expecting our design to get closer to this.
    # We cannot use a chain selector as this crystal is 1 residue longer,
    # so we have to take them out (from the C-term).
    <Index name="targetChain" resnums="1B-116B" />

    # Alignment selector can be applied to both the final design and the target.
    # This is required to do a non-global alignemnt RMSD.
    # This selector means that we are aligning through the inserted motif wihtout
    # the flexible regions assigned to it.
    <Index name="target_alignment" resnums="45B-62B" />

    # When comparing with the target structure, we can do it for all the structure
    # or just for those residues that should be alpha helix (there is no garantee
    # they will be so in the designs, though).
    <Index name="target_h1"  resnums="2B-33B" />
    <Index name="target_h2"  resnums="39B-75B" />
    <Index name="target_h3"  resnums="82B-115B" />
    <Or name="target_alphas" selectors="target_h1,target_h2,target_h3" />

    # Or we can even just compare at the level of the 3 helices just in contact
    # with the binder helix, thus avoiding the derivation produced due to the length
    #Â of the helices.
    <Index name="target_lh1"       resnums="10B-31B" />
    <Index name="target_lh2"       resnums="43B-64B" />
    <Index name="target_lh3"       resnums="95B-114B" />
    <Or name="target_local_alphas" selectors="target_lh1,target_lh2,target_lh3" />
  </RESIDUE_SELECTORS>

  <MOVE_MAP_FACTORIES>
    # Standard FFL MoveMap
    <xi:include href="../../../xml_pieces/movemap.xml" />
  </MOVE_MAP_FACTORIES>

  <TASKOPERATIONS>
    # Standard FFL TaskOperators
    <xi:include href="../../../xml_pieces/taskoperators.xml" />
    # To mimic 4oyd inner core
    <OperateOnResidueSubset name="MT_INNER1" selector="m1t" >
      <RestrictAbsentCanonicalAASRLT aas="L" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER2" selector="m2t" >
      <RestrictAbsentCanonicalAASRLT aas="E" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER3" selector="m3t" >
      <RestrictAbsentCanonicalAASRLT aas="R" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER4" selector="m4t" >
      <RestrictAbsentCanonicalAASRLT aas="Y" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER5" selector="m5t" >
      <RestrictAbsentCanonicalAASRLT aas="A" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER6" selector="m6t" >
      <RestrictAbsentCanonicalAASRLT aas="M" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER7" selector="m7t" >
      <RestrictAbsentCanonicalAASRLT aas="D" />
    </OperateOnResidueSubset>
    <OperateOnResidueSubset name="MT_INNER8" selector="m8t" >
      <RestrictAbsentCanonicalAASRLT aas="I" />
    </OperateOnResidueSubset>
  </TASKOPERATIONS>

  <MOVERS>
    # We work with 3 PDBs here:
    # 3lhp.pdb.gz is the PDB that contains the template that we will use. It will be loaded
    #             through -s flag but also here as a reference pose: template_pose
    # 4oyd.pdb.gz is the PDB that constains motif andthe design that we aim to mimic.
    # ** SavePoseMover used like this does not need to be called during PROTOCOL to work.
    <SavePoseMover name="load_template" reference_name="template_pose" pdb_file="../../../pdbs/3lhp.pdb.gz" />
    <SavePoseMover name="load_motif"    reference_name="motif_pose"    pdb_file="../../../pdbs/2wh6.pdb.gz" />
    <SavePoseMover name="load_target"   reference_name="target_pose"   pdb_file="../../../pdbs/4oyd.pdb.gz" />
    <SavePoseMover name="save_folded"   reference_name="folded_pose"   restore_pose="0" />

    # 3lhp has other chains than the one we need (S). We must delete them.
    <DeleteRegionMover name="removeExtraChains" residue_selector="!templateChain" />

    # The creates the fragments (if they need to be created) or loads them from a file
    # into the DataMap with the "frags" identifier (that needs to be specified in the NubInitio).
    <StructFragmentMover name="FragmentPicker" prefix="frags"
      vall_file="../../../database/vall.jul19.2011.gz" output_frag_files="1"
      small_frag_file="frags.200.3mers" large_frag_file="frags.200.9mers"
    />

    # Use distance atompairconstraints to guide the folding
    <AddConstraints name="addCST" >
      <AtomPairConstraintGenerator name="atompairCST" sd="2.0" ca_only="true"
        use_harmonic="true" unweighted="true" min_seq_sep="6" max_distance="40" residue_selector="templateChain"
      />
    </AddConstraints>
    <ClearConstraintsMover name="clearCST" />

    # The NubInitio folding is done here.
    <NubInitioMover name="FFL" fragments_id="frags" template_motif_selector="insertion" use_cst="true"
      rmsd_threshold="5" fullatom_scorefxn="fullatom" >
      <Nub reference_name="motif_pose" residue_selector="query_motif" binder_selector="binder" >
        <Segment order="1" n_term_flex="2" c_term_flex="2" editable="3,4,6,7,10,11,14,17,18,21,22" />
      </Nub>
    </NubInitioMover>
    # This is good to have to see a schema of what residues are going to be affected in which way
    <DisplayPoseLabelsMover name="showDesign" task_operations="FFLMOTIF_TASKOP,FFLFLEX_TASKOP,FFLTEMPLATE_TASKOP"
        movemap_factory="FFLSTANDARD_MOVEMAP" />

    # Edit the sequence to stabilize the protein
    <FastDesign name="DesignRelax" scorefxn="fullatom" clear_designable_residues="true"
               task_operations="FFLMOTIF_TASKOP,FFLFLEX_TASKOP,FFLTEMPLATE_TASKOP,MT_INNER1,MT_INNER2,MT_INNER3,MT_INNER4,MT_INNER5,MT_INNER6,MT_INNER7,MT_INNER8"
               repeats="3" delete_virtual_residues_after_FastRelax="true"
               movemap_factory="FFLSTANDARD_MOVEMAP" >
    </FastDesign>

    # Local alignment for final evaluation
    <AlignByResidueSelectorMover name="align" reference_name="target_pose"
      reference_selector="target_alignment" query_selector="target_alignment" />

  </MOVERS>

  <FILTERS> # (confidence=0 -> to score not to filter)
    # Check global RMSD against the source Template
    <RmsdFromResidueSelectorFilter name="GRMSD2Template"
      reference_name="template_pose" reference_selector="templateChain" query_selector="designChain" confidence="0" />
    # Check global RMSD against the target PDB (4OYD.pdb)
    <RmsdFromResidueSelectorFilter name="GRMSD2Target"
      reference_name="target_pose" reference_selector="targetChain" query_selector="designChain" confidence="0" />
    # Check RMSD against the target PDB (4OYD.pdb) aligned through the inserted region
    # Needs to be preceded by an alignment through the region of interest
    <RmsdFromResidueSelectorFilter name="LRMSD2Target"  superimpose="false"
      reference_name="target_pose" reference_selector="targetChain" query_selector="designChain" confidence="0" />
    # Check RMSD against the target PDB (4OYD.pdb) aligned through the inserted region only for alhpa helices
    # Needs to be preceded by an alignment through the region of interest
    <RmsdFromResidueSelectorFilter name="LRMSDH2Target"  superimpose="false"
      reference_name="target_pose" reference_selector="target_alphas" query_selector="target_alphas" confidence="0" />
    # Check RMSD against the target PDB (4OYD.pdb) aligned through the inserted region only for alhpa helices regions
    # in contact with the binding motif. Needs to be preceded by an alignment through the region of interest
    <RmsdFromResidueSelectorFilter name="LRMSDLH2Target"  superimpose="false"
      reference_name="target_pose" reference_selector="target_local_alphas" query_selector="target_local_alphas" confidence="0" />
    # check rmsd drift
    <RmsdFromResidueSelectorFilter name="rmsd_drift"
      reference_name="folded_pose" reference_selector="designChain" query_selector="designChain" confidence="0" />
    # Make sure to get an evaluation of the design alone
    <ScorePoseSegmentFromResidueSelectorFilter name="design_score" confidence="0" residue_selector="designChain" scorefxn="fullatom" />

    <BuriedUnsatHbonds name="BUNS" jump_number="0" confidence="0"
      task_operations="FFLMOTIF_TASKOP,FFLFLEX_TASKOP,FFLTEMPLATE_TASKOP" />
    <PackStat name="packstat" repeats="5" chain="1" confidence="0" />
  </FILTERS>

  <PROTOCOLS>
    # Preparing Template
    <Add mover="removeExtraChains" />
    <Add mover="FragmentPicker" />
    # Fold
    <Add mover="addCST" />
    <Add mover="FFL" />
    <Add mover="showDesign" />
    <Add mover="clearCST" />
    <Add mover="save_folded" />
    # Design
    <Add mover="addCST" />
    <Add mover="DesignRelax" />
    <Add mover="clearCST" />
    # Evaluate
    <Add filter="GRMSD2Template" />
    <Add filter="GRMSD2Target" />
    <Add mover="align" />
    <Add filter="LRMSD2Target" />
    <Add filter="LRMSDH2Target" />
    <Add filter="LRMSDLH2Target" />
    <Add filter="rmsd_drift" />
    <Add filter="design_score" />
    <Add filter="BUNS" />
    <Add filter="packstat" />
  </PROTOCOLS>

</ROSETTASCRIPTS>
